const
  Plugin = require('../plugin')
  fs = require 'fs'
  zipstream = require 'zipstream'
  path = require 'path'
  {safePath} = require '../futils'
  express = require 'express'
  findit = require 'findit'

module.exports = class Download extends Plugin
  (bus) ~>
    super(...)
    @is_enabled = false
    @is_ready = false # not until we set up library link

    bus.on 'save_state', (state) ~>
      state.status.download_enabled = @is_enabled

    bus.on 'restore_state', (state) ~>
      @is_enabled = true

      unless (@music_directory = state.mpd_conf.music_directory)?
        @is_enabled = false
        console.warn "No music directory set. Download plugin disabled."
        return

    bus.on 'app', (app) ~>
      # so you can download songs
      if @is_enabled
        # TODO this needs to be re-mounted when download becomes enabled.
        app.use('/library', express.static(@music_directory))
      app.get '/library/', @checkEnabledMiddleware, (req, resp) ~>
        @downloadPath @music_directory, "library.zip", req, resp
      app.get /^\/library\/(.*)\/$/, @checkEnabledMiddleware, (req, resp) ~>
        req_dir = req.params[0]
        zip_name = safePath(req_dir.replace(/\//g, " - ")) + ".zip"
        dl_path = path.join(@music_directory, req_dir)
        @downloadPath dl_path, zip_name, req, resp
      app.post '/download/custom', [@checkEnabledMiddleware, express.urlencoded()], (req, resp) ~>
        files = (path.join(@music_directory, f) for f of req.body.file)
        zip_name = "music.zip"
        @sendZipOfFiles zip_name, files, req, resp
      app.get '/download/album/:album', @checkEnabledMiddleware, (req, resp) ~>
        album = @mpd.library.album_table[req.params.album]
        if album!?
          resp.statusCode = 404
          resp.end()
          return
        files = (path.join(@music_directory, track.file) for track of album.tracks)
        zip_name = safePath(album.name) + ".zip"
        @sendZipOfFiles zip_name, files, req, resp
      app.get '/download/artist/:artist', @checkEnabledMiddleware, (req, resp) ~>
        artist = @mpd.library.artist_table[req.params.artist]
        if artist!?
          resp.statusCode = 404
          resp.end()
          return
        zip_name = safePath(artist.name) + ".zip"
        files = []
        for album of artist.albums
          for track of album.tracks
            files.push(path.join(@music_directory, track.file))
        @sendZipOfFiles zip_name, files, req, resp


    bus.on 'mpd', !(@mpd) ~>


  downloadPath: !(dl_path, zip_name, req, resp) ->
    finder = findit.find dl_path
    files = []
    finder.on \file, !(file) ~> files.push(file)
    finder.on \error, !(err) ~>
      finder.removeAllListeners \end
      console.error "Error when downloading zip of", relative_path, err.stack
      resp.statusCode = 404
      resp.end()
    finder.on \end, !~>
      @sendZipOfFiles zip_name, files, req, resp

  sendZipOfFiles: !(zip_name, files, req, resp) ->
    cleanup = []
    req.on \close, !~>
      for fn of cleanup then try fn()
      resp.end()
    resp.setHeader "Content-Type", "application/zip"
    resp.setHeader "Content-Disposition", "attachment; filename=#{zip_name}"
    zip = zipstream.createZip {}
    cleanup.push !~> zip.destroy()
    zip.pipe resp
    !~function nextFile
      file_path = files.shift()
      if file_path?
        options =
          name: path.relative(@music_directory, file_path)
          store: true
        read_stream = fs.createReadStream(file_path)
        cleanup.push !~> read_stream.destroy()
        zip.addFile read_stream, options, nextFile
      else
        zip.finalize !~> resp.end()
    nextFile()
