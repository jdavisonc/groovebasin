const
  Plugin = require('../plugin')

const
  history_size = 10
  future_size = 10
  LAST_QUEUED_STICKER = "groovebasin.last-queued"

module.exports = class DynamicMode extends Plugin
  (bus) ~>
    super(...)
    @previous_ids = {}
    @got_stickers = false
    # our cache of the LAST_QUEUED_STICKER
    @last_queued = {}

    bus.on 'save_state', @~saveState
    bus.on 'restore_state', @~restoreState
    bus.on 'mpd', @~setMpd
    bus.on 'socket_connect', @~onSocketConnection

  restoreState: !(state) ->
    @is_on = state.status.dynamic_mode ? false
    @random_ids = state.status.random_ids ? {}

  saveState: !(state) ->
    state.status.dynamic_mode = @is_on
    state.status.dynamic_mode_enabled = @is_enabled
    state.status.random_ids = @random_ids


  setMpd: !(@mpd) ->
    @mpd.on 'statusupdate', @~checkDynamicMode
    @mpd.on 'playlistupdate', @~checkDynamicMode
    @mpd.on 'libraryupdate', @~updateStickers

  onSocketConnection: !(socket) ->
    socket.on 'DynamicMode', !(data) ~>
      return unless @is_enabled
      args = JSON.parse data
      did_anything = false
      for key, value in args
        if key is 'dynamic_mode'
          continue if @is_on is value
          did_anything = true
          @is_on = value
      if did_anything
        @checkDynamicMode()
        @emit('status_changed')

  checkDynamicMode: !->
    return unless @is_enabled
    return unless @mpd.library.artists.length
    return unless @got_stickers
    item_list = @mpd.playlist.item_list
    current_id = @mpd.status.current_item?.id
    current_index = -1
    all_ids = {}
    new_files = []
    for item, i of item_list
      if item.id is current_id
        current_index = i
      all_ids[item.id] = true
      new_files.push item.track.file unless @previous_ids[item.id]?
    # tag any newly queued tracks
    now = new Date()
    @mpd.setStickers new_files, LAST_QUEUED_STICKER, JSON.stringify(now), !(err) ~>
      if err then console.warn "dynamic mode set stickers error:", err
    # anticipate the changes
    @last_queued[file] = now for file of new_files

    # if no track is playing, assume the first track is about to be
    if current_index is -1
      current_index = 0
    else
      # any tracks <= current track don't count as random anymore
      for i from 0 to current_index
        delete @random_ids[item_list[i].id]

    if @is_on
      delete_count = Math.max(current_index - history_size, 0)
      if history_size < 0
        delete_count = 0

      @mpd.removeIds (item_list[i].id for i from 0 til delete_count)
      add_count = Math.max(future_size + 1 - (item_list.length - current_index), 0)
      @mpd.queueFiles @getRandomSongFiles(add_count), null, !(err, items) ~>
        throw err if err
        # track which ones are the automatic ones
        changed = false
        for item of items
          @random_ids[item.id] = true
          changed = true
        @emit('status_changed') if changed

    # scrub the random_ids (only if we're sure we're not still loading
    if item_list.length
      new_random_ids = {}
      for id in @random_ids
        if all_ids[id]
          new_random_ids[id] = true
      @random_ids = new_random_ids
    @previous_ids = all_ids
    @emit('status_changed')

  updateStickers: !->
    @mpd.findStickers '/', LAST_QUEUED_STICKER, !(err, stickers) ~>
      if err
        console.error "dynamicmode findsticker error: #{err}"
        return
      for sticker in stickers
        [file, value] = sticker
        track = @mpd.library.track_table[file]
        @last_queued[file] = new Date(value)
      @got_stickers = true

  getRandomSongFiles: (count) ->
    return [] if count is 0
    never_queued = []
    sometimes_queued = []
    for file, track in @mpd.library.track_table
      if @last_queued[file]?
        sometimes_queued.push track
      else
        never_queued.push track
    # backwards by time
    sometimes_queued.sort (a, b) ~>
      @last_queued[b.file].getTime() - @last_queued[a.file].getTime()
    # distribution is a triangle for ever queued, and a rectangle for never queued
    #    ___
    #   /| |
    #  / | |
    # /__|_|
    max_weight = sometimes_queued.length
    triangle_area = Math.floor(max_weight * max_weight / 2)
    max_weight = 1 if max_weight is 0
    rectangle_area = max_weight * never_queued.length
    total_size = triangle_area + rectangle_area
    if total_size is 0
      return []
    # decode indexes through the distribution shape
    files = []
    for i from 0 til count
      index = Math.random() * total_size
      if index < triangle_area
        # triangle
        track = sometimes_queued[Math.floor Math.sqrt index]
      else
        # rectangle
        track = never_queued[Math.floor((index - triangle_area) / max_weight)]
      files.push track.file
    files

