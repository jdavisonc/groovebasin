const
  fs = require 'fs'
  http = require 'http'
  net = require 'net'
  socketio = require 'socket.io'
  express = require 'express'
  path = require 'path'
  assert = require 'assert'
  mkdirp = require 'mkdirp'
  Mpd = require '../mpd.js/lib/mpd'
  async = require 'async'
  which = require 'which'
  MpdConf = require('./mpdconf')
  Killer = require('./killer')
  spawn = require('child_process').spawn
  {EventEmitter} = require('events')
  
process.env.NODE_ENV ||= "dev"

const
  HOST = process.env.HOST or "0.0.0.0"
  PORT = parseInt(process.env.PORT, 10) or 16242
  RUN_DIR = "run"
  MPD_SOCKET_PATH = path.join(RUN_DIR, "mpd.socket")
  STATE_FILE = path.join(RUN_DIR, "state.json")
  MPD_CONF_PATH = path.join(RUN_DIR, "mpd.conf")
  MPD_PID_FILE = path.join(RUN_DIR, "mpd.pid")


mpd_conf = MpdConf() # default
mpd_conf.setRunDir(RUN_DIR)
root_pass = null
accounts = null
default_account = null
my_mpd = null
my_mpd_socket = null
connect_success = true
state = null
io = null

plugins =
  objects: {}
  bus: new EventEmitter()
  initialize: !(cb) ->
    const PLUGIN_PATH = path.join(__dirname, "plugins")
    fs.readdir PLUGIN_PATH, !(err, files) ~>
      return cb(err) if err
      for file of files
        continue unless /\.js$/.test(file)
        name = path.basename(file, ".js")
        Plugin = require("./plugins/#name")
        plugin = @objects[name] = new Plugin(@bus)
        plugin.on \state_changed, saveState
        plugin.on \status_changed, saveAndSendStatus
      cb()
  featuresList: ->
    ([name, plugin.is_enabled] for name, plugin in @objects)


!function makeRunDir (cb)
  mkdirp(RUN_DIR, cb)

const STATE_VERSION = 3 # increment this when layout of state object changes
!function initState (cb)
  which 'mpd', !(err, mpd_exe) ->
    # it's ok if we can't find the mpd binary right now.
    if err then console.warn "Unable to find mpd binary in path: #{err.stack}"

    state :=
      state_version: STATE_VERSION
      mpd_exe_path: mpd_exe
      status: {} # this structure is visible to clients
      mpd_conf: mpd_conf.state
    cb()

async.series [
  initState
  makeRunDir
  plugins~initialize
  restoreState
  writeMpdConf
], !(err) ->
  assert.ifError(err)

  app = express()
  app.configure !->
    app.use(express.static(path.join(__dirname, '../public')))
    app.use(express.static(path.join(__dirname, '../src/public')))
    app.disable('x-powered-by')

  app_server = http.createServer(app)

  io := socketio.listen(app_server)
  io.set 'log level', 2
  io.sockets.on 'connection', onSocketIoConnection

  plugins.bus.emit \app, app
  plugins.bus.emit \save_state, state

  for [name, enabled] of plugins.featuresList()
    if enabled
      console.info "#{name} is enabled."
    else
      console.warn "#{name} is disabled."

  app_server.listen PORT, HOST, !->
    process.send 'online'
    console.info "Listening at http://#HOST:#PORT"

  process.on 'message', onProcessMessage

  connectServerMpd()

  restartMpd !(err) ->
    if err then console.error "Unable to restart mpd: #{err}"

function oncePerEventLoopFunc (fn)
  queued = false
  cbs = []
  !(cb) ->
    cbs.push(cb) if cb?
    return if queued
    queued := true
    process.nextTick !->
      queued := false
      fn !->
        cb(...) for cb of cbs

const saveState = oncePerEventLoopFunc !(cb) ->
  plugins.bus.emit \save_state, state
  fs.writeFile STATE_FILE, JSON.stringify(state, null, 4), "utf8", !(err) ->
    if err then console.error "Error saving state to disk: #{err.stack}"
    cb(err)

!function restoreState (cb)
  fs.readFile STATE_FILE, \utf8, !(err, data) ->
    if err?code is \ENOENT
      console.warn "No state file. Creating a new one."
    else if err
      return cb(err)
    else
      try
        loaded_state = JSON.parse(data)
      catch e
        return cb(new Error("state file contains invalid JSON: #e"))
      if loaded_state.state_version is not STATE_VERSION
        return cb(new Error("State version is #{loaded_state.state_version} but should be #STATE_VERSION"))

      state := loaded_state

    # have the plugins restore and then save to delete values that should not
    # have been restored.
    plugins.bus.emit \restore_state, state
    plugins.bus.emit \save_state, state

    cb()

!function sendStatus
  plugins.bus.emit \status_sent, state.status
  io.sockets.emit 'Status', JSON.stringify state.status

!function saveAndSendStatus
  saveState()
  sendStatus()

!function writeMpdConf (cb)
  mpd_conf := new MpdConf(state.mpd_conf)
  state.mpd_conf = mpd_conf.state
  fs.writeFile MPD_CONF_PATH, mpd_conf.toMpdConf(), cb

function createMpdConnection (unix_socket)
  if unix_socket
    connection = net.connect {path: MPD_SOCKET_PATH}
  else
    port = state.mpd_conf.port
    host = 'localhost'
    connection = net.connect {port, host}
  connection.setEncoding('utf8')
  connection

!function connectBrowserMpd (socket)
  mpd_socket = createMpdConnection false
  mpd_socket.on \connect, !->
    try socket.emit 'MpdConnect'
  mpd_socket.on 'data', !(data) ->
    socket.emit 'FromMpd', data
  mpd_socket.on 'end', !->
    try socket.emit 'MpdDisconnect'
  mpd_socket.on 'error', !->
    console.warn "browser no mpd daemon found."

  socket.removeAllListeners 'ToMpd'
  socket.on 'ToMpd', !(data) ->
    try mpd_socket.write data
  socket.removeAllListeners 'disconnect'
  socket.on 'disconnect', !->
    mpd_socket.end()

!function onSocketIoConnection (socket)
  connectBrowserMpd socket
  permissions = default_account
  plugins.bus.emit \socket_connect, socket, -> permissions
  socket.emit 'Permissions', JSON.stringify(permissions)
  socket.on 'Password', !(pass) ->
    if success = (ref = accounts[pass])?
      permissions := ref
    socket.emit 'Permissions', JSON.stringify(permissions)
    socket.emit 'PasswordResult', JSON.stringify(success)

!function restartMpd (cb)
  mkdirp mpd_conf.playlistDirectory(), !(err) ->
    return cb(err) if err
    fs.readFile MPD_PID_FILE, 'utf8', !(err, pid_str) ->
      if err
        if err?code is \ENOENT
          startMpd(cb)
        else
          cb(err)
      else
        # need to kill mpd
        console.info "killing mpd", state.mpd_exe_path
        pid = parseInt(pid_str, 10)
        killer = Killer(pid)
        killer.on \error, !(err) -> cb(err)
        killer.on \end, !-> startMpd(cb)

!function startMpd(cb)
  console.info "starting mpd", state.mpd_exe_path
  child = spawn state.mpd_exe_path, [
    '--no-daemon'
    MPD_CONF_PATH
  ], {
    stdio: 'ignore'
    detached: true
  }
  child.unref()
  cb()

!function connectServerMpd
  my_mpd_socket := createMpdConnection true
  my_mpd_socket.on 'end', !->
    console.warn "server mpd disconnect"
    tryReconnect()
  my_mpd_socket.on 'error', !->
    if connect_success
      connect_success := false
      console.warn "server no mpd daemon found."
    tryReconnect()
  my_mpd := Mpd()
  my_mpd.on \data, !(data) -> my_mpd_socket.write(data)
  my_mpd.on 'error', !(msg) -> console.error msg

  my_mpd_socket.on \connect, !->
    console.info "server to mpd connect"
    connect_success := true
    my_mpd.handleConnectionStart()
    if root_pass? and root_pass.length > 0
      my_mpd.authenticate root_pass

    # connect socket clients to mpd
    io.sockets.clients().forEach connectBrowserMpd
  my_mpd_socket.on \data, !(data) -> my_mpd.receive(data)

  plugins.bus.emit \mpd, my_mpd

!function tryReconnect
  setTimeout connectServerMpd, 1000

function arrayToSet (array)
  obj = {}
  obj[item] = true for item of array
  obj

!function onProcessMessage (message)
  if message is 'shutdown'
    process.exit(0)

